using  System;
using  System.Collections.Generic;
using  System.Linq.Expressions;
using  System.Web;
using  Umbraco.Core.Models;
using  Umbraco.Core.Models.PublishedContent;
using  Umbraco.Web;
using  Umbraco.ModelsBuilder;
using  Umbraco.ModelsBuilder.Umbraco;
[assembly: PureLiveAssembly]
[assembly:ModelsBuilderAssembly(PureLive = true, SourceHash = "4be297e0cdc4cc27")]
[assembly:System.Reflection.AssemblyVersion("0.0.0.1")]


// FILE: models.generated.cs

//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------















namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Dialogue</summary>
	[PublishedContentModel("Dialogue")]
	public partial class Dialogue : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Dialogue";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Dialogue(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Dialogue, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Activities Per Page
		///</summary>
		[ImplementPropertyType("activitiesPerPage")]
		public int ActivitiesPerPage
		{
			get { return this.GetPropertyValue<int>("activitiesPerPage"); }
		}

		///<summary>
		/// Admin Email Address: This admin email address is where all notifications from the forum will be sent.
		///</summary>
		[ImplementPropertyType("adminEmailAddress")]
		public string AdminEmailAddress
		{
			get { return this.GetPropertyValue<string>("adminEmailAddress"); }
		}

		///<summary>
		/// Allow Email Subscriptions: Allow members to subscribe to topics and categories and get emailed when a new post or topic is created. NOTE: You may need a dedicated SMTP service for busy forums.
		///</summary>
		[ImplementPropertyType("allowEmailSubscriptions")]
		public bool AllowEmailSubscriptions
		{
			get { return this.GetPropertyValue<bool>("allowEmailSubscriptions"); }
		}

		///<summary>
		/// Allow Member Signatures: Allow members to have a signature under each post and topic.
		///</summary>
		[ImplementPropertyType("allowMemberSignatures")]
		public bool AllowMemberSignatures
		{
			get { return this.GetPropertyValue<bool>("allowMemberSignatures"); }
		}

		///<summary>
		/// Allow Points: Allow points in the forum. Members get points for voting and posting etc...
		///</summary>
		[ImplementPropertyType("allowPoints")]
		public bool AllowPoints
		{
			get { return this.GetPropertyValue<bool>("allowPoints"); }
		}

		///<summary>
		/// Allow Posts To Be Marked As Solution: Allow members to mark a post as the solution to a topic / question
		///</summary>
		[ImplementPropertyType("allowPostsToBeMarkedAsSolution")]
		public bool AllowPostsToBeMarkedAsSolution
		{
			get { return this.GetPropertyValue<bool>("allowPostsToBeMarkedAsSolution"); }
		}

		///<summary>
		/// Allow Private Messages: Allow members to private message each other
		///</summary>
		[ImplementPropertyType("allowPrivateMessages")]
		public bool AllowPrivateMessages
		{
			get { return this.GetPropertyValue<bool>("allowPrivateMessages"); }
		}

		///<summary>
		/// Allow Rss Feeds: Whether or not to show RSS feeds on the site
		///</summary>
		[ImplementPropertyType("allowRssFeeds")]
		public bool AllowRssFeeds
		{
			get { return this.GetPropertyValue<bool>("allowRssFeeds"); }
		}

		///<summary>
		/// Amount Of Points Before A User Can Vote: The amount of points a member must have before they are allowed to vote on other members posts
		///</summary>
		[ImplementPropertyType("amountOfPointsBeforeAUserCanVote")]
		public int AmountOfPointsBeforeAuserCanVote
		{
			get { return this.GetPropertyValue<int>("amountOfPointsBeforeAUserCanVote"); }
		}

		///<summary>
		/// Banned Email: A list of banned email addresses. You can use wildcards such as *@domain.com to block all attempted registrations using emails from that domain
		///</summary>
		[ImplementPropertyType("bannedEmail")]
		public IEnumerable<string> BannedEmail
		{
			get { return this.GetPropertyValue<IEnumerable<string>>("bannedEmail"); }
		}

		///<summary>
		/// Banned Links: This allows you to put in the Url/Link of a problem spammer (i.e. www.sitename.com) and when they try to post something with this domain their post or profile update will fail
		///</summary>
		[ImplementPropertyType("bannedLinks")]
		public IEnumerable<string> BannedLinks
		{
			get { return this.GetPropertyValue<IEnumerable<string>>("bannedLinks"); }
		}

		///<summary>
		/// Banned Words: These are banned words that get hashed out. Whenever they are found they are replaced with **** 
		///</summary>
		[ImplementPropertyType("bannedWords")]
		public IEnumerable<string> BannedWords
		{
			get { return this.GetPropertyValue<IEnumerable<string>>("bannedWords"); }
		}

		///<summary>
		/// Dialogue Url Name: This is used to create the url part of misc pages (Leaderboard etc...) which are not dedicated nodes
		///</summary>
		[ImplementPropertyType("dialogueUrlName")]
		public string DialogueUrlName
		{
			get { return this.GetPropertyValue<string>("dialogueUrlName"); }
		}

		///<summary>
		/// Email Admin On New Member Signup: This will email the forum owner using the email address in the settings, every time a new member signs up
		///</summary>
		[ImplementPropertyType("emailAdminOnNewMemberSignup")]
		public bool EmailAdminOnNewMemberSignup
		{
			get { return this.GetPropertyValue<bool>("emailAdminOnNewMemberSignup"); }
		}

		///<summary>
		/// Enable Akismet Spam Control: Enable Akismet Spam control. You will need to add the key. Use at your own risk
		///</summary>
		[ImplementPropertyType("enableAkismetSpamControl")]
		public bool EnableAkismetSpamControl
		{
			get { return this.GetPropertyValue<bool>("enableAkismetSpamControl"); }
		}

		///<summary>
		/// Enable Member Reporting: Allow members to report other members. They are sent as emails to the forum admin email
		///</summary>
		[ImplementPropertyType("enableMemberReporting")]
		public bool EnableMemberReporting
		{
			get { return this.GetPropertyValue<bool>("enableMemberReporting"); }
		}

		///<summary>
		/// Enable Spam Reporting: Allow members to report potential spam posts. They are sent as emails to the forum admin email
		///</summary>
		[ImplementPropertyType("enableSpamReporting")]
		public bool EnableSpamReporting
		{
			get { return this.GetPropertyValue<bool>("enableSpamReporting"); }
		}

		///<summary>
		/// Enter a Spam registration prevention question: This question is shown on the registration page. They must answer it correctly to be able to register. Good to stop bots (i.e. What is 5 + 4)
		///</summary>
		[ImplementPropertyType("enterASpamRegistrationPreventionQuestion")]
		public string EnterAspamRegistrationPreventionQuestion
		{
			get { return this.GetPropertyValue<string>("enterASpamRegistrationPreventionQuestion"); }
		}

		///<summary>
		/// Enter the answer to your Spam question
		///</summary>
		[ImplementPropertyType("enterTheAnswerToYourSpamQuestion")]
		public string EnterTheAnswerToYourSpamQuestion
		{
			get { return this.GetPropertyValue<string>("enterTheAnswerToYourSpamQuestion"); }
		}

		///<summary>
		/// Enter Your Akismet Key Here
		///</summary>
		[ImplementPropertyType("enterYourAkismetKeyHere")]
		public string EnterYourAkismetKeyHere
		{
			get { return this.GetPropertyValue<string>("enterYourAkismetKeyHere"); }
		}

		///<summary>
		/// Facebook App Id: You will need to add this and the secret to use Facebook login. See docs for more info
		///</summary>
		[ImplementPropertyType("facebookAppId")]
		public string FacebookAppId
		{
			get { return this.GetPropertyValue<string>("facebookAppId"); }
		}

		///<summary>
		/// Facebook App Secret
		///</summary>
		[ImplementPropertyType("facebookAppSecret")]
		public string FacebookAppSecret
		{
			get { return this.GetPropertyValue<string>("facebookAppSecret"); }
		}

		///<summary>
		/// File Upload Allowed Extensions: This needs to be a CSV string. i.e.   jpg,jpeg,png,gif
		///</summary>
		[ImplementPropertyType("fileUploadAllowedExtensions")]
		public string FileUploadAllowedExtensions
		{
			get { return this.GetPropertyValue<string>("fileUploadAllowedExtensions"); }
		}

		///<summary>
		/// File Upload Maximum FileSize: File Upload Maximum FileSize In Bytes
		///</summary>
		[ImplementPropertyType("fileUploadMaximumFilesize")]
		public int FileUploadMaximumFilesize
		{
			get { return this.GetPropertyValue<int>("fileUploadMaximumFilesize"); }
		}

		///<summary>
		/// Forum Description: General description about this forum and it's topic
		///</summary>
		[ImplementPropertyType("forumDescription")]
		public IHtmlString ForumDescription
		{
			get { return this.GetPropertyValue<IHtmlString>("forumDescription"); }
		}

		///<summary>
		/// Forum Name: The name of your forum, this is used for things like email messages
		///</summary>
		[ImplementPropertyType("forumName")]
		public string ForumName
		{
			get { return this.GetPropertyValue<string>("forumName"); }
		}

		///<summary>
		/// Google Client Id: You will need to add this and the secret to use Google login. See docs for more info
		///</summary>
		[ImplementPropertyType("googleClientId")]
		public string GoogleClientId
		{
			get { return this.GetPropertyValue<string>("googleClientId"); }
		}

		///<summary>
		/// Google Client Secret
		///</summary>
		[ImplementPropertyType("googleClientSecret")]
		public string GoogleClientSecret
		{
			get { return this.GetPropertyValue<string>("googleClientSecret"); }
		}

		///<summary>
		/// Hide From Sitemap
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return this.GetPropertyValue<bool>("hideFromSitemap"); }
		}

		///<summary>
		/// Manually Authorise New Members: New members can register, but can't use their accounts until a forum admin has authorised their account.
		///</summary>
		[ImplementPropertyType("manuallyAuthoriseNewMembers")]
		public bool ManuallyAuthoriseNewMembers
		{
			get { return this.GetPropertyValue<bool>("manuallyAuthoriseNewMembers"); }
		}

		///<summary>
		/// Member Url Name: This is used to create the member profile url
		///</summary>
		[ImplementPropertyType("memberUrlName")]
		public string MemberUrlName
		{
			get { return this.GetPropertyValue<string>("memberUrlName"); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return this.GetPropertyValue<string>("metaDescription"); }
		}

		///<summary>
		/// New Members Must Confirm Accounts Via Email: New members can register, but cannot use their accounts until they have clicked a link in a email sent to them.
		///</summary>
		[ImplementPropertyType("newMembersMustConfirmAccountsViaEmail")]
		public bool NewMembersMustConfirmAccountsViaEmail
		{
			get { return this.GetPropertyValue<bool>("newMembersMustConfirmAccountsViaEmail"); }
		}

		///<summary>
		/// New Member Starting Group: This is the starting group for all new members that register on this forum.
		///</summary>
		[ImplementPropertyType("newMemberStartingGroup")]
		public object NewMemberStartingGroup
		{
			get { return this.GetPropertyValue("newMemberStartingGroup"); }
		}

		///<summary>
		/// Notification Reply Email Address: When messages are sent to members (Such as email confirmation) this address will show as the sender. i.e. noreply@domain.com
		///</summary>
		[ImplementPropertyType("notificationReplyEmailAddress")]
		public string NotificationReplyEmailAddress
		{
			get { return this.GetPropertyValue<string>("notificationReplyEmailAddress"); }
		}

		///<summary>
		/// Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return this.GetPropertyValue<string>("pageTitle"); }
		}

		///<summary>
		/// Points Added For A Solution: The amount of points given to the owner of the post which is gets marked as the Solution
		///</summary>
		[ImplementPropertyType("pointsAddedForASolution")]
		public int PointsAddedForAsolution
		{
			get { return this.GetPropertyValue<int>("pointsAddedForASolution"); }
		}

		///<summary>
		/// Points Added For Positive Vote: The amount of points given to the owner of the post the voter has liked
		///</summary>
		[ImplementPropertyType("pointsAddedForPositiveVote")]
		public int PointsAddedForPositiveVote
		{
			get { return this.GetPropertyValue<int>("pointsAddedForPositiveVote"); }
		}

		///<summary>
		/// Points Added Per New Post: The amount of points added to a member for creating a new post
		///</summary>
		[ImplementPropertyType("pointsAddedPerNewPost")]
		public int PointsAddedPerNewPost
		{
			get { return this.GetPropertyValue<int>("pointsAddedPerNewPost"); }
		}

		///<summary>
		/// Points Deducted For Negative Vote: The amount of points deducted from the owner of the post the voter has disliked
		///</summary>
		[ImplementPropertyType("pointsDeductedForNegativeVote")]
		public int PointsDeductedForNegativeVote
		{
			get { return this.GetPropertyValue<int>("pointsDeductedForNegativeVote"); }
		}

		///<summary>
		/// Posts Per Page
		///</summary>
		[ImplementPropertyType("postsPerPage")]
		public int PostsPerPage
		{
			get { return this.GetPropertyValue<int>("postsPerPage"); }
		}

		///<summary>
		/// Private Message Flood Control: In minutes. The amount of time that must pass before a member can send another private message. Very good for stopping spammers.
		///</summary>
		[ImplementPropertyType("privateMessageFloodControl")]
		public int PrivateMessageFloodControl
		{
			get { return this.GetPropertyValue<int>("privateMessageFloodControl"); }
		}

		///<summary>
		/// Private Message Inbox Size: The amount of messages a member is allowed, over this limit they are not allowed to send anymore until they have deleted some
		///</summary>
		[ImplementPropertyType("privateMessageInboxSize")]
		public int PrivateMessageInboxSize
		{
			get { return this.GetPropertyValue<int>("privateMessageInboxSize"); }
		}

		///<summary>
		/// Suspend Registration: If you tick this then no new members will be able to register
		///</summary>
		[ImplementPropertyType("suspendRegistration")]
		public bool SuspendRegistration
		{
			get { return this.GetPropertyValue<bool>("suspendRegistration"); }
		}

		///<summary>
		/// Theme: The theme of the forum. Very easy to change. Just copy the default folder, rename it and restart the website. And you can then select the new theme here
		///</summary>
		[ImplementPropertyType("theme")]
		public object Theme
		{
			get { return this.GetPropertyValue("theme"); }
		}

		///<summary>
		/// Topics Per Page
		///</summary>
		[ImplementPropertyType("topicsPerPage")]
		public int TopicsPerPage
		{
			get { return this.GetPropertyValue<int>("topicsPerPage"); }
		}

		///<summary>
		/// Topic Url Name: This is used to create the topic url
		///</summary>
		[ImplementPropertyType("topicUrlName")]
		public string TopicUrlName
		{
			get { return this.GetPropertyValue<string>("topicUrlName"); }
		}

		///<summary>
		/// Umbraco Internal Redirect ID: Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected page’s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return this.GetPropertyValue("umbracoInternalRedirectID"); }
		}

		///<summary>
		/// Hide From Navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}

		///<summary>
		/// Umbraco Redirect: Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return this.GetPropertyValue("umbracoRedirect"); }
		}

		///<summary>
		/// Umbraco URL Alias: This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter leemessenger,test/this-is-a-test this would resolve the following urls to the same page.    /leemessenger.aspx  /test/this-is-a-test.aspx
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return this.GetPropertyValue<string>("umbracoUrlAlias"); }
		}

		///<summary>
		/// Umbraco URL Name: This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return this.GetPropertyValue<string>("umbracoURLName"); }
		}
	}

	/// <summary>Dialogue Category</summary>
	[PublishedContentModel("DialogueCategory")]
	public partial class DialogueCategory : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "DialogueCategory";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DialogueCategory(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DialogueCategory, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Category Image
		///</summary>
		[ImplementPropertyType("categoryImage")]
		public string CategoryImage
		{
			get { return this.GetPropertyValue<string>("categoryImage"); }
		}

		///<summary>
		/// Category Permissions
		///</summary>
		[ImplementPropertyType("categoryPermissions")]
		public object CategoryPermissions
		{
			get { return this.GetPropertyValue("categoryPermissions"); }
		}

		///<summary>
		/// Description
		///</summary>
		[ImplementPropertyType("description")]
		public IHtmlString Description
		{
			get { return this.GetPropertyValue<IHtmlString>("description"); }
		}

		///<summary>
		/// Hide From Sitemap
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return this.GetPropertyValue<bool>("hideFromSitemap"); }
		}

		///<summary>
		/// Lock Category
		///</summary>
		[ImplementPropertyType("lockCategory")]
		public bool LockCategory
		{
			get { return this.GetPropertyValue<bool>("lockCategory"); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return this.GetPropertyValue<string>("metaDescription"); }
		}

		///<summary>
		/// Moderate all posts in this Category
		///</summary>
		[ImplementPropertyType("moderateAllPostsInThisCategory")]
		public bool ModerateAllPostsInThisCategory
		{
			get { return this.GetPropertyValue<bool>("moderateAllPostsInThisCategory"); }
		}

		///<summary>
		/// Moderate all topics in this Category
		///</summary>
		[ImplementPropertyType("moderateAllTopicsInThisCategory")]
		public bool ModerateAllTopicsInThisCategory
		{
			get { return this.GetPropertyValue<bool>("moderateAllTopicsInThisCategory"); }
		}

		///<summary>
		/// Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return this.GetPropertyValue<string>("pageTitle"); }
		}

		///<summary>
		/// Umbraco Internal Redirect ID: Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected page’s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return this.GetPropertyValue("umbracoInternalRedirectID"); }
		}

		///<summary>
		/// Hide From Navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}

		///<summary>
		/// Umbraco Redirect: Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return this.GetPropertyValue("umbracoRedirect"); }
		}

		///<summary>
		/// Umbraco URL Alias: This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter leemessenger,test/this-is-a-test this would resolve the following urls to the same page.    /leemessenger.aspx  /test/this-is-a-test.aspx
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return this.GetPropertyValue<string>("umbracoUrlAlias"); }
		}

		///<summary>
		/// Umbraco URL Name: This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return this.GetPropertyValue<string>("umbracoURLName"); }
		}
	}

	/// <summary>Dialogue Login</summary>
	[PublishedContentModel("Dialoguelogin")]
	public partial class Dialoguelogin : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Dialoguelogin";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Dialoguelogin(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Dialoguelogin, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide From Sitemap
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return this.GetPropertyValue<bool>("hideFromSitemap"); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return this.GetPropertyValue<string>("metaDescription"); }
		}

		///<summary>
		/// Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return this.GetPropertyValue<string>("pageTitle"); }
		}

		///<summary>
		/// Umbraco Internal Redirect ID: Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected page’s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return this.GetPropertyValue("umbracoInternalRedirectID"); }
		}

		///<summary>
		/// Hide From Navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}

		///<summary>
		/// Umbraco Redirect: Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return this.GetPropertyValue("umbracoRedirect"); }
		}

		///<summary>
		/// Umbraco URL Alias: This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter leemessenger,test/this-is-a-test this would resolve the following urls to the same page.    /leemessenger.aspx  /test/this-is-a-test.aspx
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return this.GetPropertyValue<string>("umbracoUrlAlias"); }
		}

		///<summary>
		/// Umbraco URL Name: This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return this.GetPropertyValue<string>("umbracoURLName"); }
		}
	}

	/// <summary>Dialogue Register</summary>
	[PublishedContentModel("DialogueRegister")]
	public partial class DialogueRegister : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "DialogueRegister";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DialogueRegister(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DialogueRegister, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide From Sitemap
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return this.GetPropertyValue<bool>("hideFromSitemap"); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return this.GetPropertyValue<string>("metaDescription"); }
		}

		///<summary>
		/// Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return this.GetPropertyValue<string>("pageTitle"); }
		}

		///<summary>
		/// Umbraco Internal Redirect ID: Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected page’s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return this.GetPropertyValue("umbracoInternalRedirectID"); }
		}

		///<summary>
		/// Hide From Navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}

		///<summary>
		/// Umbraco Redirect: Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return this.GetPropertyValue("umbracoRedirect"); }
		}

		///<summary>
		/// Umbraco URL Alias: This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter leemessenger,test/this-is-a-test this would resolve the following urls to the same page.    /leemessenger.aspx  /test/this-is-a-test.aspx
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return this.GetPropertyValue<string>("umbracoUrlAlias"); }
		}

		///<summary>
		/// Umbraco URL Name: This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return this.GetPropertyValue<string>("umbracoURLName"); }
		}
	}

	/// <summary>Folder</summary>
	[PublishedContentModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Folder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Folder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contents:
		///</summary>
		[ImplementPropertyType("contents")]
		public object Contents
		{
			get { return this.GetPropertyValue("contents"); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("Image")]
	public partial class Image : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Image";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Image(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload image
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Web.Models.ImageCropDataSet UmbracoFile
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("umbracoFile"); }
		}

		///<summary>
		/// Height
		///</summary>
		[ImplementPropertyType("umbracoHeight")]
		public string UmbracoHeight
		{
			get { return this.GetPropertyValue<string>("umbracoHeight"); }
		}

		///<summary>
		/// Width
		///</summary>
		[ImplementPropertyType("umbracoWidth")]
		public string UmbracoWidth
		{
			get { return this.GetPropertyValue<string>("umbracoWidth"); }
		}
	}

	/// <summary>File</summary>
	[PublishedContentModel("File")]
	public partial class File : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "File";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public File(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload file
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public object UmbracoFile
		{
			get { return this.GetPropertyValue("umbracoFile"); }
		}
	}

	/// <summary>Dialogue Member</summary>
	[PublishedContentModel("DialogueMember")]
	public partial class DialogueMember : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "DialogueMember";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public DialogueMember(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DialogueMember, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Avatar
		///</summary>
		[ImplementPropertyType("avatar")]
		public object Avatar
		{
			get { return this.GetPropertyValue("avatar"); }
		}

		///<summary>
		/// Can Edit Other Members: Enable this and the user can edit other members posts, their profiles and ban members (Usually use in conjunction with moderate permissions).
		///</summary>
		[ImplementPropertyType("canEditOtherMembers")]
		public bool CanEditOtherMembers
		{
			get { return this.GetPropertyValue<bool>("canEditOtherMembers"); }
		}

		///<summary>
		/// Disable Email Notifications
		///</summary>
		[ImplementPropertyType("disableEmailNotifications")]
		public bool DisableEmailNotifications
		{
			get { return this.GetPropertyValue<bool>("disableEmailNotifications"); }
		}

		///<summary>
		/// Disable File Uploads
		///</summary>
		[ImplementPropertyType("disableFileUploads")]
		public bool DisableFileUploads
		{
			get { return this.GetPropertyValue<bool>("disableFileUploads"); }
		}

		///<summary>
		/// Disable Posting
		///</summary>
		[ImplementPropertyType("disablePosting")]
		public bool DisablePosting
		{
			get { return this.GetPropertyValue<bool>("disablePosting"); }
		}

		///<summary>
		/// Disable Private Messages
		///</summary>
		[ImplementPropertyType("disablePrivateMessages")]
		public bool DisablePrivateMessages
		{
			get { return this.GetPropertyValue<bool>("disablePrivateMessages"); }
		}

		///<summary>
		/// Email: This is a bit rubbish, but it's the only way to get the email from the new member service at the current time
		///</summary>
		[ImplementPropertyType("email")]
		public string Email
		{
			get { return this.GetPropertyValue<string>("email"); }
		}

		///<summary>
		/// Facebook Access Token
		///</summary>
		[ImplementPropertyType("facebookAccessToken")]
		public string FacebookAccessToken
		{
			get { return this.GetPropertyValue<string>("facebookAccessToken"); }
		}

		///<summary>
		/// Facebook Id
		///</summary>
		[ImplementPropertyType("facebookId")]
		public string FacebookId
		{
			get { return this.GetPropertyValue<string>("facebookId"); }
		}

		///<summary>
		/// Google Access Token
		///</summary>
		[ImplementPropertyType("googleAccessToken")]
		public string GoogleAccessToken
		{
			get { return this.GetPropertyValue<string>("googleAccessToken"); }
		}

		///<summary>
		/// Google Id
		///</summary>
		[ImplementPropertyType("googleId")]
		public string GoogleId
		{
			get { return this.GetPropertyValue<string>("googleId"); }
		}

		///<summary>
		/// Last Active Date
		///</summary>
		[ImplementPropertyType("lastActiveDate")]
		public DateTime LastActiveDate
		{
			get { return this.GetPropertyValue<DateTime>("lastActiveDate"); }
		}

		///<summary>
		/// Post Count: The users post count. This is kept like this to help reduce SQL queries and improve performance of the forum
		///</summary>
		[ImplementPropertyType("postCount")]
		public int PostCount
		{
			get { return this.GetPropertyValue<int>("postCount"); }
		}

		///<summary>
		/// Signature
		///</summary>
		[ImplementPropertyType("signature")]
		public string Signature
		{
			get { return this.GetPropertyValue<string>("signature"); }
		}

		///<summary>
		/// Slug: This is what we use to look up the member in the front end
		///</summary>
		[ImplementPropertyType("slug")]
		public string Slug
		{
			get { return this.GetPropertyValue<string>("slug"); }
		}

		///<summary>
		/// Twitter
		///</summary>
		[ImplementPropertyType("twitter")]
		public string Twitter
		{
			get { return this.GetPropertyValue<string>("twitter"); }
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}

		///<summary>
		/// Website
		///</summary>
		[ImplementPropertyType("website")]
		public string Website
		{
			get { return this.GetPropertyValue<string>("website"); }
		}
	}

	/// <summary>Member</summary>
	[PublishedContentModel("Member")]
	public partial class Member : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Member";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public Member(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

}



// EOF
